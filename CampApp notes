Things to install first are: 
- Express 
- Mongoose - make sure its the last version 
- ejs 
- Node - make user its the most stable version 
- nodemon

To check if mongoose is installed, do:
=> npm list mongoose

To check globally:
=> npm list -g  mongoose

Install Mongoose command, do:
npm i mongoose 
- for a specific version e.g. 6.2.8, use:
npm i mongoose@6.2.8 

To install Nodemon, use command:
=> npm install --save-dev nodemon

To install the most stable Node verions, do:
=> sudo n stable

To install that Node version e.g. 16.16.0, do:
=> nvm install 16.16.0

To double check the installed version do:
=> npm version

Starting with creating a simple app: 

To install the latest version of NVM and Node, check the link below:
https://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl

1. to create package.json file
    npm init -y 
2. In the terminal, you could type; ls to see what file has been created 
    ls 
3. To install express and mongoose and ejs, do:
    npm i express mongoose ejs 

4. created the app.js file 

5. after putting the code, we start the server with: 
    nodemon app.js 
If successful? 
1. It should print any console log(' ') on the terminal 
2. It should show the same console log phrase on the page once you open http://localhost:3000/ page 

<!-- const express = require('express'); 
const app = express(); 

app.get('/', (req, res) => {
    res.send('Hi From YelpCamp')
})

app.listen(3000, () => {
    console.log("Serving on Port 3000")
}) -->

6. To get ejs to work, first we create views directory of folder 
7. Then we create a home.ejs file with  <h1>This is HOME PAGE - Camp App -</h1>
8. Then check if page loads that h1 

Next - we are going to create our campground model 
part 411 - compground model 
The model will consist of name/title, price, description and location (without longtitude, latitude)

9. We make a models directory, then within it, we create a campground model 

In the next part 412 - we are going to seed some data with some initial campground data so that we can see some progress quickly 

PART 412 - Seeding campgrounds 
1. will setup some fake campgrounds, some seed data to work with, so that when we create our index route, edit route etc.. we actually have somethign to work with. 
2. will a file called seeds, which we will loop to make campgrounds. 
3. two files we have added: 
 - cities.js file 
 - seedHelpers.js file 
 both are in the seeds directory 


We going to do some basic CRUD functionality for Campgrounds 
 PART 413 - Campground Index - a UL with hyperlink using anchor tag  
    <a href="/campgrounds/<%= campground._id %>"> <%= campground.title %> </a>
 

 <!-- // Will set different routes for Campgrounds e.g. campgrounds index "/campgrounds"
app.get('/campgrounds', async (req, res) => {
    const campgrounds = await Campground.find({});
    // Then we pass that to a template called index.ejs within the campgrounds folder
    res.render('campgrounds/index', { campgrounds })
}) -->
test that up by writing in the browser => http://localhost:3000/campgrounds and check for if the list is there 
 next part, we will do our show page 

 PART 414 - Campground show route => eventually going to be our details page 

 <!-- app.get('/campgrounds/:id', async (req, res) => {
    // Then we pass that to a template 
    const campground = await Campground.findById(req.params.id);
    res.render('campgrounds/show', { campground }); 
}) -->
we still have not done any error handling yet, also on the show.ejs template, will have a map, rating and other things that we build gradually! 

test that up by writing in the browser => http://localhost:3000/campgrounds/sfdsfd

PART 415 Campgroud New & Create 
This requires adding on the form to make a new campground, this requires two different Routes:
1. New form - served by a GET request 
2. create route - usually a POST request 

In the new.ejs, you will find name="campgroud[title]" the aim of this, when we send our data via the POST request to our Express app to the server, everything in the request.body will be stored under campground, its just a nice thing you can do to group content together. 

test that in the browser http://localhost:3000/campgrounds/new

PART 416 Campground Edit & Update 
We need two routes too:
1. One for the form 
2. one for submitting the form 

1. first, we created the route 
2. created the edit.ejs file - copied the new.ejs code into it 

@2:47 - we need to re-populate the values of the title and the location 

@3:56 - Now, talking about submitting the form, we know that forms can only send a GET or POST requests from the browser, so we can fake a PUT, PATCH, DELETE requests using the 
method override. 
To install method override: 
=> npm i method-override


PART 416 Campground DELETE functionality 

1. will add a button the is a click to delete 
2. we need a DELETE route, and the 'id' should be included 

PART 467 Defining the review model 
1. created another file under model, called review.js 